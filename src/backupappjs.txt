import React, { useState, useEffect } from "react";
import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
import Login from "./pages/login";
import Dashboard from "./pages/dashboard";
import BarangMasuk from "./pages/barangmasuk";
import BarangKeluar from "./pages/barangkeluar";
import StockBarang from "./pages/stockbarang";

function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [stockData, setStockData] = useState([]);

  // 🔹 Load stok dari localStorage saat pertama kali
  useEffect(() => {
    const savedStock = localStorage.getItem("stockData");
    if (savedStock) {
      setStockData(JSON.parse(savedStock));
    }
  }, []);

  // 🔹 Simpan stok ke localStorage setiap ada perubahan
  useEffect(() => {
    localStorage.setItem("stockData", JSON.stringify(stockData));
  }, [stockData]);

  // 🔹 Fungsi login
const handleLogin = (username, password) => {
  if (username === "admin" && password === "12345") {
    setIsLoggedIn(true);
    localStorage.setItem("isLoggedIn", "true"); // simpan login state
  } else {
    alert("Username atau password salah!");
  }
};

  // 🔹 Fungsi logout
  const handleLogout = () => {
  setIsLoggedIn(false);
  localStorage.removeItem("isLoggedIn");
};

useEffect(() => {
  const loggedIn = localStorage.getItem("isLoggedIn");
  if (loggedIn === "true") {
    setIsLoggedIn(true);
  }
}, []);

  // 🔹 Fungsi barang masuk → update stok
  const handleBarangMasuk = (kode, nama, spesifikasi, jumlah, tanggal) => {
    setStockData((prevData) => {
      const existingItem = prevData.find((item) => item.kode === kode);
      if (existingItem) {
        // Update stok lama
        return prevData.map((item) =>
          item.kode === kode
            ? {
                ...item,
                jumlahMasuk: (item.jumlahMasuk || 0) + parseInt(jumlah),
                sisa: (item.sisa || 0) + parseInt(jumlah),
                terakhirMasuk: tanggal,
              }
            : item
        );
      } else {
        // Tambah stok baru
        return [
          ...prevData,
          {
            kode,
            nama,
            spesifikasi,
            jumlahMasuk: parseInt(jumlah),
            jumlahKeluar: 0,
            sisa: parseInt(jumlah),
            terakhirMasuk: tanggal,
            terakhirKeluar: "-",
          },
        ];
      }
    });
  };

  // 🔹 Fungsi barang keluar → update stok
  const handleBarangKeluar = (kode, nama, spesifikasi, jumlah, tanggal) => {
    setStockData((prevData) => {
      const existingItem = prevData.find((item) => item.kode === kode);
      if (existingItem) {
        // Update stok keluar
        const sisaBaru = (existingItem.sisa || 0) - parseInt(jumlah);
        return prevData.map((item) =>
          item.kode === kode
            ? {
                ...item,
                jumlahKeluar: (item.jumlahKeluar || 0) + parseInt(jumlah),
                sisa: sisaBaru >= 0 ? sisaBaru : 0,
                terakhirKeluar: tanggal,
              }
            : item
        );
      } else {
        // Barang belum ada di stok
        return [
          ...prevData,
          {
            kode,
            nama,
            spesifikasi,
            jumlahMasuk: 0,
            jumlahKeluar: parseInt(jumlah),
            sisa: 0,
            terakhirMasuk: "-",
            terakhirKeluar: tanggal,
          },
        ];
      }
    });
  };

  return (
    <Router>
      <Routes>
        {/* 🔐 Login */}
        <Route
          path="/"
          element={
            isLoggedIn ? (
              <Navigate to="/dashboard" />
            ) : (
              <Login onLogin={handleLogin} />
            )
          }
        />

        {/* 🏠 Dashboard */}
        <Route
          path="/dashboard"
          element={
            isLoggedIn ? (
              <Dashboard onLogout={handleLogout} />
            ) : (
              <Navigate to="/" />
            )
          }
        />

        {/* 📥 Barang Masuk */}
        <Route
          path="/barang-masuk"
          element={
            isLoggedIn ? (
              <BarangMasuk
                onLogout={handleLogout}
                onBarangMasuk={handleBarangMasuk}
              />
            ) : (
              <Navigate to="/" />
            )
          }
        />

        {/* 📤 Barang Keluar */}
        <Route
          path="/barang-keluar"
          element={
            isLoggedIn ? (
              <BarangKeluar
                onLogout={handleLogout}
                onBarangKeluar={handleBarangKeluar}
              />
            ) : (
              <Navigate to="/" />
            )
          }
        />

        {/* 📦 Stock Barang */}
        <Route
          path="/stock"
          element={
            isLoggedIn ? (
              <StockBarang onLogout={handleLogout} items={stockData} />
            ) : (
              <Navigate to="/" />
            )
          }
        />
      </Routes>
    </Router>
  );
}

export default App;
